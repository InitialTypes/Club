open import Library
open import Terms
open import STLC

open import Kripke.Semantics

module Kripke.Soundness (K : Kripke) where
open Semantics‚Ä≤ K
open import Kripke.Lemmas K
open STLC-Semantics sem hiding (‚ü®_‚ü©)
open Œ≤Œ∑-Equality
open ‚â°-Reasoning

is-sound‚Ä≤ : ‚àÄ{Œì A} {ùìê : Axioms} {t t‚Ä≤ : Term Œì A} ‚Üí
  ùìê ‚ä¢ t ‚â°Œª t‚Ä≤ ‚Üí (‚ä® ùìê) ‚Üí ‚àÄ {w} (Œ≥ : [ Œì ]* w) ‚Üí ‚ü® t ‚ü© Œ≥ ‚â° ‚ü® t‚Ä≤ ‚ü© Œ≥
is-sound‚Ä≤ (axiom t u i x) hyp {w} Œ≥ = begin
  ‚ü® t ‚Üì i ‚ü© Œ≥
  ‚â°‚ü® weak-den t i Œ≥ ‚ü©
  ‚ü® t ‚ü© (i‚ü® i ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª t‚Ä≤ ‚Üí t‚Ä≤ w tt) (hyp x)  ‚ü©
  ‚ü® u ‚ü© (i‚ü® i ‚ü© Œ≥)
  ‚â°‚ü® sym (weak-den u i Œ≥) ‚ü©
  ‚ü® u ‚Üì i ‚ü© Œ≥
  ‚àé
is-sound‚Ä≤ (Œ≤ t u) hyp Œ≥ = begin
  ‚ü® app (abs t) u ‚ü© Œ≥
  ‚â°‚ü® law-app (abs t) u Œ≥ ‚ü©
  apply (‚ü® abs t ‚ü© Œ≥) (‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª x ‚Üí apply x (‚ü® u ‚ü© Œ≥)) (sym (trans-id (‚ü® abs t ‚ü© Œ≥))) ‚ü©
  apply (‚ü® abs t ‚ü© Œ≥ ‚Üó later-refl) (‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® aux ‚ü©
  ‚ü® t ‚ü© (Œ≥ ‚Üó* later-refl , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª x ‚Üí ‚ü® t ‚ü© (x , ‚ü® u ‚ü© Œ≥)) (trans*-id Œ≥) ‚ü©
  ‚ü® t ‚ü© (Œ≥ , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª f ‚Üí ‚ü® t ‚ü© (f Œ≥ , ‚ü® u ‚ü© Œ≥)) (sym id-weak-den) ‚ü©
  ‚ü® t ‚ü© (i‚ü® id ‚ü© Œ≥ , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª Œ≥‚Ä≤ ‚Üí ‚ü® t ‚ü© (Œ≥‚Ä≤ , ‚ü® u ‚ü© Œ≥))  (sym (sub-weaken id Œ≥)) ‚ü©
  ‚ü® t ‚ü© (œÉ‚ü® var ‚ü© Œ≥ , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü®‚ü©
  ‚ü® t ‚ü© (œÉ‚ü® sub u ‚ü© Œ≥)
  ‚â°‚ü® sym (sub-den t (sub u) Œ≥) ‚ü©
  ‚ü® t / sub u ‚ü© Œ≥
  ‚àé
  where aux = law-apply-abs {p = later-refl}  t Œ≥ (‚ü® u ‚ü© Œ≥)
is-sound‚Ä≤ (Œ∑ t) hyp Œ≥ = law-ext (‚ü® t ‚ü© Œ≥)
                                              (‚ü® abs (app (t ‚Üì suc) (var zero)) ‚ü© Œ≥)
                                              Œª p a ‚Üí sym (begin
  apply (‚ü® abs (app (t ‚Üì suc) (var zero)) ‚ü© Œ≥ ‚Üó p) a
  ‚â°‚ü® law-apply-abs (app (t ‚Üì suc) (var zero)) Œ≥ a ‚ü©
  ‚ü® app (t ‚Üì suc) (var zero) ‚ü© (Œ≥ ‚Üó* p , a)
  ‚â°‚ü® law-app (t ‚Üì suc) (var zero) (Œ≥ ‚Üó* p , a) ‚ü©
  apply (‚ü® t ‚Üì suc ‚ü© (Œ≥ ‚Üó* p , a)) (‚ü® var zero ‚ü© (Œ≥ ‚Üó* p , a))
  ‚â°‚ü® cong (Œª v ‚Üí apply (‚ü® t ‚Üì suc ‚ü© (Œ≥ ‚Üó* p , a)) v) (law-var zero (Œ≥ ‚Üó* p , a)) ‚ü©
  apply (‚ü® t ‚Üì suc ‚ü© (Œ≥ ‚Üó* p , a)) a
  ‚â°‚ü® cong (Œª t ‚Üí apply t a) (weak-den t suc (Œ≥ ‚Üó* p , a)) ‚ü©
  apply (‚ü® t ‚ü© (i‚ü® suc ‚ü© (Œ≥ ‚Üó* p , a))) a
  ‚â°‚ü® cong (Œª i ‚Üí apply (‚ü® t ‚ü© (i (Œ≥ ‚Üó* p , a))) a) (lift-weak-den id) ‚ü©
  apply (‚ü® t ‚ü© (i‚ü® id ‚ü© (Œ≥ ‚Üó* p))) a
  ‚â°‚ü® cong (Œª i ‚Üí apply (‚ü® t ‚ü© (i (Œ≥ ‚Üó* p))) a) id-weak-den ‚ü©
  apply (‚ü® t ‚ü© (Œ≥ ‚Üó* p)) a
  ‚â°‚ü® cong (Œª x ‚Üí apply x a) (trans-den t Œ≥ p) ‚ü©
  apply (‚ü® t ‚ü© Œ≥ ‚Üó p) a
  ‚àé)
is-sound‚Ä≤ (Œªcong-abs {t = t} {t‚Ä≤ = t‚Ä≤} eq) hyp Œ≥ =
  law-ext (‚ü® abs t ‚ü© Œ≥) (‚ü® abs t‚Ä≤ ‚ü© Œ≥) Œª p a ‚Üí begin
  apply (‚ü® abs t ‚ü© Œ≥ ‚Üó p) a
  ‚â°‚ü® law-apply-abs t Œ≥ a ‚ü©
  ‚ü® t ‚ü© (Œ≥ ‚Üó* p , a)
  ‚â°‚ü® is-sound‚Ä≤ eq hyp (Œ≥ ‚Üó* p , a) ‚ü©
  ‚ü® t‚Ä≤ ‚ü© (Œ≥ ‚Üó* p , a)
  ‚â°‚ü® sym (law-apply-abs t‚Ä≤ Œ≥ a) ‚ü©
  apply (‚ü® abs t‚Ä≤ ‚ü© Œ≥ ‚Üó p) a
  ‚àé
is-sound‚Ä≤ (Œªcong-app {Œì} {A} {B} {t} {t‚Ä≤} {u} {u‚Ä≤} eq eq‚ÇÅ) hyp Œ≥ = begin
  ‚ü® app t u ‚ü© Œ≥
  ‚â°‚ü® law-app t u Œ≥ ‚ü©
  apply (‚ü® t ‚ü© Œ≥) (‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong‚ÇÇ apply (is-sound‚Ä≤ eq hyp Œ≥) (is-sound‚Ä≤ eq‚ÇÅ hyp Œ≥) ‚ü©
  apply (‚ü® t‚Ä≤ ‚ü© Œ≥) (‚ü® u‚Ä≤ ‚ü© Œ≥)
  ‚â°‚ü® sym (law-app t‚Ä≤ u‚Ä≤ Œ≥) ‚ü©
  ‚ü® app t‚Ä≤ u‚Ä≤ ‚ü© Œ≥
  ‚àé
is-sound‚Ä≤ Œªrefl hyp Œ≥ = refl
is-sound‚Ä≤ (Œªsym eq) hyp Œ≥ = sym (is-sound‚Ä≤ eq hyp Œ≥)
is-sound‚Ä≤ (Œªtrans {Œì} {A} {t} {t‚Ä≤} {t‚Ä≥} eq eq‚ÇÅ) hyp Œ≥ = begin
  ‚ü® t ‚ü© Œ≥
  ‚â°‚ü® is-sound‚Ä≤ eq hyp Œ≥ ‚ü©
  ‚ü® t‚Ä≤ ‚ü© Œ≥
  ‚â°‚ü® is-sound‚Ä≤ eq‚ÇÅ hyp Œ≥ ‚ü©
  ‚ü® t‚Ä≥ ‚ü© Œ≥
  ‚àé
