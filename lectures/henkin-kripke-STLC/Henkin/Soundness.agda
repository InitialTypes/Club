open import Library
open import Terms
open import STLC

open import Henkin.Semantics

module Henkin.Soundness (H : Henkin) where
open Semantics‚Ä≤ H
open import Henkin.Lemmas H
open Œ≤Œ∑-Equality
open ‚â°-Reasoning

-- only up to extensionality!
is-sound‚Ä≤ : ‚àÄ{Œì A} {ùìê : Axioms} {t t‚Ä≤ : Term Œì A} ‚Üí
  ùìê ‚ä¢ t ‚â°Œª t‚Ä≤ ‚Üí (‚àÄ{A} {t u : Term Œµ A} ‚Üí ùìê t u ‚Üí ‚ü® t ‚ü© ‚â° ‚ü® u ‚ü©)
  ‚Üí ‚àÄ Œ≥ ‚Üí ‚ü® t ‚ü© Œ≥ ‚â° ‚ü® t‚Ä≤ ‚ü© Œ≥
is-sound‚Ä≤ (axiom t u j x) hyp Œ≥ = begin
  ‚ü® t ‚Üì j ‚ü© Œ≥
  ‚â°‚ü® weak-den t j Œ≥ ‚ü©
  ‚ü® t ‚ü© (i‚ü® j ‚ü© Œ≥)
  ‚â°‚ü® cong-app (hyp x) (i‚ü® j ‚ü© Œ≥) ‚ü©
  ‚ü® u ‚ü© (i‚ü® j ‚ü© Œ≥)
  ‚â°‚ü® sym (weak-den u j Œ≥) ‚ü©
  ‚ü® u ‚Üì j ‚ü© Œ≥
  ‚àé
is-sound‚Ä≤ (Œ≤ t u) hyp Œ≥ = begin
  ‚ü® app (abs t) u ‚ü© Œ≥
  ‚â°‚ü® law-app (abs t) u Œ≥ ‚ü©
  apply (‚ü® abs t ‚ü© Œ≥) (‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® law-apply-abs t Œ≥ (‚ü® u ‚ü© Œ≥) ‚ü©
  ‚ü® t ‚ü© (Œ≥ , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª x ‚Üí ‚ü® t ‚ü© (x Œ≥ , ‚ü® u ‚ü© Œ≥)) (sym id-weak-den) ‚ü©
  ‚ü® t ‚ü© (i‚ü® id ‚ü© Œ≥ , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong (Œª x ‚Üí ‚ü® t ‚ü© (x , ‚ü® u ‚ü© Œ≥)) (sym (sub-weaken id Œ≥)) ‚ü©
  ‚ü® t ‚ü© (œÉ‚ü® var ‚ü© Œ≥ , ‚ü® u ‚ü© Œ≥)
  ‚â°‚ü®‚ü©
  (‚ü® t ‚ü© ‚àò œÉ‚ü® sub u ‚ü©) Œ≥
  ‚â°‚ü® sym (sub-den t (sub u) Œ≥) ‚ü©
  ‚ü® t /x‚Üê u ‚ü© Œ≥
  ‚àé
is-sound‚Ä≤ (Œ∑ t) hyp Œ≥
  = law-ext (‚ü® t ‚ü© Œ≥) (‚ü® abs (app (t ‚Üì suc) (var zero)) ‚ü© Œ≥)
            Œª a ‚Üí sym (begin
  apply (‚ü® abs (app (t ‚Üì suc) (var zero)) ‚ü© Œ≥) a
  ‚â°‚ü® law-apply-abs (app (t ‚Üì (Œª {A} ‚Üí suc)) (var zero)) Œ≥ a ‚ü©
  ‚ü® app (t ‚Üì suc) (var zero) ‚ü© (Œ≥ , a)
  ‚â°‚ü® law-app (t ‚Üì (Œª {A} ‚Üí suc)) (var zero) (Œ≥ , a) ‚ü©
  apply (‚ü® t ‚Üì suc ‚ü© (Œ≥ , a)) (‚ü® var zero ‚ü© (Œ≥ , a))
  ‚â°‚ü® cong (Œª x ‚Üí apply x (‚ü® var zero ‚ü© (Œ≥ , a))) (weak-den t suc (Œ≥ , a)) ‚ü©
  apply (‚ü® t ‚ü© (i‚ü® suc ‚ü© (Œ≥ , a))) (‚ü® var zero ‚ü© (Œ≥ , a))
  ‚â°‚ü® cong (Œª x ‚Üí apply (‚ü® t ‚ü© (x (Œ≥ , a))) (‚ü® var zero ‚ü© (Œ≥ , a))) (lift-weak-den id) ‚ü©
  apply (‚ü® t ‚ü© (i‚ü® id ‚ü© Œ≥)) (‚ü® var zero ‚ü© (Œ≥ , a))
  ‚â°‚ü® cong (Œª x ‚Üí apply (‚ü® t ‚ü© (x Œ≥)) (‚ü® var zero ‚ü© (Œ≥ , a))) id-weak-den ‚ü©
  apply (‚ü® t ‚ü© Œ≥) (‚ü® var zero ‚ü© (Œ≥ , a))
  ‚â°‚ü® cong (Œª x ‚Üí apply (‚ü® t ‚ü© Œ≥) x) (law-var zero (Œ≥ , a)) ‚ü©
  apply (‚ü® t ‚ü© Œ≥) a
  ‚àé)
is-sound‚Ä≤ (Œªcong-abs {t = t} {t‚Ä≤ = t‚Ä≤} eq) hyp Œ≥
  = law-ext (‚ü® abs t ‚ü© Œ≥) (‚ü® abs t‚Ä≤ ‚ü© Œ≥)
            Œª a ‚Üí begin
  apply (‚ü® abs t ‚ü© Œ≥) a
  ‚â°‚ü® law-apply-abs t Œ≥ a ‚ü©
  ‚ü® t ‚ü© (Œ≥ , a)
  ‚â°‚ü® is-sound‚Ä≤ eq hyp (Œ≥ , a) ‚ü©
  ‚ü® t‚Ä≤ ‚ü© (Œ≥ , a)
  ‚â°‚ü® sym (law-apply-abs t‚Ä≤ Œ≥ a) ‚ü©
  apply (‚ü® abs t‚Ä≤ ‚ü© Œ≥) a
  ‚àé
is-sound‚Ä≤ (Œªcong-app {Œì} {A} {B} {t} {t‚Ä≤} {u} {u‚Ä≤} eq eq‚ÇÅ) hyp Œ≥ = begin
  ‚ü® app t u ‚ü© Œ≥
  ‚â°‚ü® law-app t u Œ≥ ‚ü©
  apply (‚ü® t ‚ü© Œ≥) (‚ü® u ‚ü© Œ≥)
  ‚â°‚ü® cong‚ÇÇ apply (is-sound‚Ä≤ eq hyp Œ≥)
                 (is-sound‚Ä≤ eq‚ÇÅ hyp Œ≥) ‚ü©
  apply (‚ü® t‚Ä≤ ‚ü© Œ≥) (‚ü® u‚Ä≤ ‚ü© Œ≥)
  ‚â°‚ü® sym (law-app t‚Ä≤ u‚Ä≤ Œ≥ ) ‚ü©
  ‚ü® app t‚Ä≤ u‚Ä≤ ‚ü© Œ≥
  ‚àé
is-sound‚Ä≤ Œªrefl hyp Œ≥ = refl
is-sound‚Ä≤ (Œªsym eq) hyp Œ≥ = sym (is-sound‚Ä≤ eq hyp Œ≥)
is-sound‚Ä≤ (Œªtrans {Œì} {A} {t} {t‚Ä≤} {t‚Ä≥} eq eq‚ÇÅ) hyp Œ≥ = begin
  ‚ü® t ‚ü© Œ≥
  ‚â°‚ü® is-sound‚Ä≤ eq hyp Œ≥ ‚ü©
  ‚ü® t‚Ä≤ ‚ü© Œ≥
  ‚â°‚ü® is-sound‚Ä≤ eq‚ÇÅ hyp Œ≥ ‚ü©
  ‚ü® t‚Ä≥ ‚ü© Œ≥
  ‚àé
